
2024.06.13_MPP2_GlebV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000666  000006fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000666  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800110  00800110  0000070a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef5  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ea  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080c  00000000  00000000  0000216b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00002978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d8  00000000  00000000  00002bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051d  00000000  00000000  000031d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000036f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 84 01 	jmp	0x308	; 0x308 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 31       	cpi	r26, 0x1F	; 31
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
  9e:	0c 94 31 03 	jmp	0x662	; 0x662 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <My_Init_ADC>:
 */ 
#include "ADC.h"
void My_Init_ADC()
{	
	//set default ADC read port 0 and Left adj
	ADMUX |= ( 0 << REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 83       	st	Z, r24
	ADMUX &= ~( 1 << REFS1);
  ae:	80 81       	ld	r24, Z
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	80 83       	st	Z, r24
	//ADMUX |= ( 1 << ADLAR);
	
	//set presclailer to 128 and ADC interrupt
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	87 60       	ori	r24, 0x07	; 7
  bc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADIE);
  be:	80 81       	ld	r24, Z
  c0:	88 68       	ori	r24, 0x88	; 136
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <My_ADC_Read>:
}

void My_ADC_Read(uint8_t adc_channel)
{	
	
	ADMUX = (ADMUX & 0xF8) | adc_channel;
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	89 2b       	or	r24, r25
  d0:	80 83       	st	Z, r24
	// start conversation
	ADCSRA |= (1 << ADSC);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	ADCSRA &= ~(0 << ADIF);
  dc:	80 81       	ld	r24, Z
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <My_ADC_convert_to_voltage>:
}

float My_ADC_convert_to_voltage(uint16_t adc_value)
{
	return (adc_value * 5 ) / 1024.0 ;
  e2:	bc 01       	movw	r22, r24
  e4:	66 0f       	add	r22, r22
  e6:	77 1f       	adc	r23, r23
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	68 0f       	add	r22, r24
  ee:	79 1f       	adc	r23, r25
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 2d 02 	call	0x45a	; 0x45a <__floatunsisf>
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 e8       	ldi	r20, 0x80	; 128
  fe:	5a e3       	ldi	r21, 0x3A	; 58
 100:	0e 94 bb 02 	call	0x576	; 0x576 <__mulsf3>
 104:	08 95       	ret

00000106 <My_Init_TIM0>:
	OCR2A = 250;
	
	TCCR2A  |= (1 << WGM21); // CTC Mode
	
	// Specifisk? p?rtraukuma at?aušana
	TIMSK2	|= (1 << OCIE2A);
 106:	16 bc       	out	0x26, r1	; 38
 108:	8a ef       	ldi	r24, 0xFA	; 250
 10a:	88 bd       	out	0x28, r24	; 40
 10c:	84 b5       	in	r24, 0x24	; 36
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	84 bd       	out	0x24, r24	; 36
 112:	ee e6       	ldi	r30, 0x6E	; 110
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <My_Init_TIM1>:
 11e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 122:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 126:	89 e0       	ldi	r24, 0x09	; 9
 128:	9d e3       	ldi	r25, 0x3D	; 61
 12a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 12e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 132:	e1 e8       	ldi	r30, 0x81	; 129
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	80 83       	st	Z, r24
 13c:	ef e6       	ldi	r30, 0x6F	; 111
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <My_TIM_Start>:
 * @param tim_name			taimera skaitit?ja nosaukums
 * @param prescailer_value  Dalit?ja 
*/
void My_TIM_Start(uint8_t tim_name, uint8_t prescailer_value)
{
	switch (tim_name)
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	59 f0       	breq	.+22     	; 0x162 <My_TIM_Start+0x1a>
 14c:	18 f0       	brcs	.+6      	; 0x154 <My_TIM_Start+0xc>
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	89 f0       	breq	.+34     	; 0x174 <My_TIM_Start+0x2c>
 152:	08 95       	ret
	{
		case TIM0:
			TCCR0B &= 0xF8;
 154:	85 b5       	in	r24, 0x25	; 37
 156:	88 7f       	andi	r24, 0xF8	; 248
 158:	85 bd       	out	0x25, r24	; 37
			TCCR0B |= prescailer_value;
 15a:	85 b5       	in	r24, 0x25	; 37
 15c:	68 2b       	or	r22, r24
 15e:	65 bd       	out	0x25, r22	; 37
		break;
 160:	08 95       	ret
		
		case TIM1:
			TCCR1B &= 0xF8;
 162:	e1 e8       	ldi	r30, 0x81	; 129
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	88 7f       	andi	r24, 0xF8	; 248
 16a:	80 83       	st	Z, r24
			TCCR1B |= prescailer_value;
 16c:	80 81       	ld	r24, Z
 16e:	68 2b       	or	r22, r24
 170:	60 83       	st	Z, r22
		break;
 172:	08 95       	ret
		
		case TIM2:
			TCCR2B &= 0xF8;
 174:	e1 eb       	ldi	r30, 0xB1	; 177
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 7f       	andi	r24, 0xF8	; 248
 17c:	80 83       	st	Z, r24
			TCCR2B |= prescailer_value;
 17e:	80 81       	ld	r24, Z
 180:	68 2b       	or	r22, r24
 182:	60 83       	st	Z, r22
 184:	08 95       	ret

00000186 <My_Init_USART>:


void My_Init_USART()
{
	// Iestate simbolu p?rs?ta ?trumu 9600 baud
	UBRR0 = 103;
 186:	87 e6       	ldi	r24, 0x67	; 103
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 18e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// RXEN0 - en uztver?šanas da?u
	// TXEN - en raid?šanas da?u
	// RXCIE - en RX p?rtraukumu
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | ( 1 << RXCIE0);
 192:	88 e9       	ldi	r24, 0x98	; 152
 194:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 19e:	08 95       	ret

000001a0 <My_USART0_TransmitByte>:
}

void My_USART0_TransmitByte(uint8_t symbol)
{
	// if transmitter buffer !empty -> write data in symbol
	while(!(UCSR0A) & (1 << UDRE0));
 1a0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UDR0 = symbol;
 1a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1a8:	08 95       	ret

000001aa <My_USART0_ReciveByte>:
}

uint8_t My_USART0_ReciveByte()
{
	uint8_t data = UDR0;
 1aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return data;
}
 1ae:	08 95       	ret

000001b0 <My_USART0_CheckString>:

int My_USART0_CheckString(uint8_t checkChar, uint8_t position, uint8_t buffer_len)
{
	// check < in the begining
	if(position == 0 && checkChar == '<')
 1b0:	61 11       	cpse	r22, r1
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <My_USART0_CheckString+0x8>
 1b4:	8c 33       	cpi	r24, 0x3C	; 60
 1b6:	81 f0       	breq	.+32     	; 0x1d8 <My_USART0_CheckString+0x28>
	{
		return 1;
	}
	else if (position == 0 && checkChar != '<')
 1b8:	61 11       	cpse	r22, r1
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <My_USART0_CheckString+0x10>
 1bc:	8c 33       	cpi	r24, 0x3C	; 60
 1be:	79 f4       	brne	.+30     	; 0x1de <My_USART0_CheckString+0x2e>
	{
		return 0;
	}
	
	// check > in the end
	if(position == buffer_len-2 && checkChar == '>')
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	42 50       	subi	r20, 0x02	; 2
 1c6:	51 09       	sbc	r21, r1
 1c8:	64 17       	cp	r22, r20
 1ca:	75 07       	cpc	r23, r21
 1cc:	59 f4       	brne	.+22     	; 0x1e4 <My_USART0_CheckString+0x34>
 1ce:	8e 33       	cpi	r24, 0x3E	; 62
 1d0:	61 f0       	breq	.+24     	; 0x1ea <My_USART0_CheckString+0x3a>
	{
		return 1;
	}
	else
	{
		return 0;
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	08 95       	ret
int My_USART0_CheckString(uint8_t checkChar, uint8_t position, uint8_t buffer_len)
{
	// check < in the begining
	if(position == 0 && checkChar == '<')
	{
		return 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	08 95       	ret
	}
	else if (position == 0 && checkChar != '<')
	{
		return 0;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	08 95       	ret
	{
		return 1;
	}
	else
	{
		return 0;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	08 95       	ret
	}
	
	// check > in the end
	if(position == buffer_len-2 && checkChar == '>')
	{
		return 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 1ee:	08 95       	ret

000001f0 <My_USART0_ReciveString>:

uint8_t My_USART0_ReciveString(uint8_t *data_arr, uint8_t lenght)
{
 1f0:	ef 92       	push	r14
 1f2:	ff 92       	push	r15
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	7c 01       	movw	r14, r24
 1fc:	c6 2f       	mov	r28, r22
	static int i = 0;
	data_arr[i] = My_USART0_ReciveByte();
 1fe:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <__data_end>
 202:	10 91 11 01 	lds	r17, 0x0111	; 0x800111 <__data_end+0x1>
 206:	08 0f       	add	r16, r24
 208:	19 1f       	adc	r17, r25
 20a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <My_USART0_ReciveByte>
 20e:	f8 01       	movw	r30, r16
 210:	80 83       	st	Z, r24

	if(i == 0)
 212:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <__data_end>
 216:	10 91 11 01 	lds	r17, 0x0111	; 0x800111 <__data_end+0x1>
 21a:	01 15       	cp	r16, r1
 21c:	11 05       	cpc	r17, r1
 21e:	79 f4       	brne	.+30     	; 0x23e <My_USART0_ReciveString+0x4e>
	{
		if(My_USART0_CheckString(data_arr[0],i,lenght) == 1)
 220:	4c 2f       	mov	r20, r28
 222:	60 2f       	mov	r22, r16
 224:	f7 01       	movw	r30, r14
 226:	80 81       	ld	r24, Z
 228:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <My_USART0_CheckString>
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	69 f4       	brne	.+26     	; 0x24a <My_USART0_ReciveString+0x5a>
		{
			i++;
 230:	0f 5f       	subi	r16, 0xFF	; 255
 232:	1f 4f       	sbci	r17, 0xFF	; 255
 234:	10 93 11 01 	sts	0x0111, r17	; 0x800111 <__data_end+0x1>
 238:	00 93 10 01 	sts	0x0110, r16	; 0x800110 <__data_end>
 23c:	06 c0       	rjmp	.+12     	; 0x24a <My_USART0_ReciveString+0x5a>
		}
		
	}
	else
	{
		i++;
 23e:	0f 5f       	subi	r16, 0xFF	; 255
 240:	1f 4f       	sbci	r17, 0xFF	; 255
 242:	10 93 11 01 	sts	0x0111, r17	; 0x800111 <__data_end+0x1>
 246:	00 93 10 01 	sts	0x0110, r16	; 0x800110 <__data_end>
	}
	
	

	if(i == lenght-1)
 24a:	6c 2f       	mov	r22, r28
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	61 50       	subi	r22, 0x01	; 1
 250:	71 09       	sbc	r23, r1
 252:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 256:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 25a:	68 17       	cp	r22, r24
 25c:	79 07       	cpc	r23, r25
 25e:	31 f4       	brne	.+12     	; 0x26c <My_USART0_ReciveString+0x7c>
	{
		i = 0;
 260:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 264:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		return 1;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	01 c0       	rjmp	.+2      	; 0x26e <My_USART0_ReciveString+0x7e>
	}
	else
	{
		return 0;
 26c:	80 e0       	ldi	r24, 0x00	; 0
	}

}
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	08 95       	ret

0000027a <Process_command>:

uint8_t Process_command(uint8_t *data_arr )
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
	
	if( strcmp(data_arr, T0_Command) == 0 ) // compare USART input with pre-defined command
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	71 e0       	ldi	r23, 0x01	; 1
 284:	0e 94 28 03 	call	0x650	; 0x650 <strcmp>
 288:	89 2b       	or	r24, r25
 28a:	81 f0       	breq	.+32     	; 0x2ac <Process_command+0x32>
	{
		return 1;
	}
	else if( strcmp(data_arr, T1_Command) == 0)
 28c:	66 e0       	ldi	r22, 0x06	; 6
 28e:	71 e0       	ldi	r23, 0x01	; 1
 290:	ce 01       	movw	r24, r28
 292:	0e 94 28 03 	call	0x650	; 0x650 <strcmp>
 296:	89 2b       	or	r24, r25
 298:	59 f0       	breq	.+22     	; 0x2b0 <Process_command+0x36>
	{

		return 2;
	}
	else if( strcmp(data_arr, T2_Command) == 0)
 29a:	6b e0       	ldi	r22, 0x0B	; 11
 29c:	71 e0       	ldi	r23, 0x01	; 1
 29e:	ce 01       	movw	r24, r28
 2a0:	0e 94 28 03 	call	0x650	; 0x650 <strcmp>
 2a4:	89 2b       	or	r24, r25
 2a6:	31 f4       	brne	.+12     	; 0x2b4 <Process_command+0x3a>
	{

		return 3;
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <Process_command+0x3c>
uint8_t Process_command(uint8_t *data_arr )
{
	
	if( strcmp(data_arr, T0_Command) == 0 ) // compare USART input with pre-defined command
	{
		return 1;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <Process_command+0x3c>
	}
	else if( strcmp(data_arr, T1_Command) == 0)
	{

		return 2;
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <Process_command+0x3c>

		return 3;
	}
	else
	{
		return 0;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <main>:
	PORTB = 0x00;
} 

int main(void)
{
    DDRD = 0b11110111;
 2bc:	87 ef       	ldi	r24, 0xF7	; 247
 2be:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0b00000011;
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	84 b9       	out	0x04, r24	; 4
    DDRC = 0b00000000;
 2c4:	17 b8       	out	0x07, r1	; 7
	
    PORTB = 0x03;
 2c6:	85 b9       	out	0x05, r24	; 5
	
    My_Init_TIM0();
 2c8:	0e 94 83 00 	call	0x106	; 0x106 <My_Init_TIM0>
    My_Init_TIM1();
 2cc:	0e 94 8f 00 	call	0x11e	; 0x11e <My_Init_TIM1>
    My_TIM_Start(TIM0,TIM0_PRESCALER_FACTOR_1024);
 2d0:	65 e0       	ldi	r22, 0x05	; 5
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 a4 00 	call	0x148	; 0x148 <My_TIM_Start>
    My_TIM_Start(TIM1,TIM1_PRESCALER_FACTOR_1024);
 2d8:	65 e0       	ldi	r22, 0x05	; 5
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 a4 00 	call	0x148	; 0x148 <My_TIM_Start>
    
	My_Init_ADC();
 2e0:	0e 94 53 00 	call	0xa6	; 0xa6 <My_Init_ADC>
	My_ADC_Read(0);
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 63 00 	call	0xc6	; 0xc6 <My_ADC_Read>
    My_Init_USART();
 2ec:	0e 94 c3 00 	call	0x186	; 0x186 <My_Init_USART>
	
	
	sei();
 2f0:	78 94       	sei
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <main+0x36>

000002f4 <__vector_14>:
		
    }
}

ISR(TIMER0_COMPA_vect)
{	
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
	
	
	
}
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	8f 93       	push	r24
	//display_controll();
	PORTD = counter << 4;
 314:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <counter>
 318:	82 95       	swap	r24
 31a:	80 7f       	andi	r24, 0xF0	; 240
 31c:	8b b9       	out	0x0b, r24	; 11
	counter++;
 31e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <counter>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <counter>
	if( counter == 10)
 328:	8a 30       	cpi	r24, 0x0A	; 10
 32a:	11 f4       	brne	.+4      	; 0x330 <__vector_11+0x28>
	{
		counter = 0;
 32c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <counter>
	}
}
 330:	8f 91       	pop	r24
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <__vector_21>:

// write temperature data 
ISR(ADC_vect)

{
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	2f 93       	push	r18
 348:	3f 93       	push	r19
 34a:	4f 93       	push	r20
 34c:	5f 93       	push	r21
 34e:	6f 93       	push	r22
 350:	7f 93       	push	r23
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	af 93       	push	r26
 358:	bf 93       	push	r27
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
	adc_value = (ADCH << 8) | ADCL;
 35e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	98 2f       	mov	r25, r24
 366:	88 27       	eor	r24, r24
 368:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 36c:	82 2b       	or	r24, r18
 36e:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <adc_value+0x1>
 372:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <adc_value>
	voltage = My_ADC_convert_to_voltage(adc_value);
 376:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <adc_value>
 37a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <adc_value+0x1>
 37e:	0e 94 71 00 	call	0xe2	; 0xe2 <My_ADC_convert_to_voltage>
 382:	bc 01       	movw	r22, r24
 384:	99 0f       	add	r25, r25
 386:	88 0b       	sbc	r24, r24
 388:	99 0b       	sbc	r25, r25
 38a:	0e 94 2f 02 	call	0x45e	; 0x45e <__floatsisf>
 38e:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <voltage>
 392:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <voltage+0x1>
 396:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <voltage+0x2>
 39a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <voltage+0x3>
}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <__vector_18>:

ISR(USART_RX_vect)
{
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	2f 93       	push	r18
 3cc:	3f 93       	push	r19
 3ce:	4f 93       	push	r20
 3d0:	5f 93       	push	r21
 3d2:	6f 93       	push	r22
 3d4:	7f 93       	push	r23
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	af 93       	push	r26
 3dc:	bf 93       	push	r27
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
	//data = My_USART0_ReciveByte();
	if(My_USART0_ReciveString(data_buffer, USART_Buffer_lenght) == 1)
 3e2:	65 e0       	ldi	r22, 0x05	; 5
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	8a e1       	ldi	r24, 0x1A	; 26
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <My_USART0_ReciveString>
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	d1 f4       	brne	.+52     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	{
		switch(Process_command(data_buffer))
 3f2:	8a e1       	ldi	r24, 0x1A	; 26
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 3d 01 	call	0x27a	; 0x27a <Process_command>
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	91 05       	cpc	r25, r1
 3fe:	51 f0       	breq	.+20     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 400:	83 30       	cpi	r24, 0x03	; 3
 402:	91 05       	cpc	r25, r1
 404:	61 f0       	breq	.+24     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	71 f4       	brne	.+28     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			//Error
			break;
			
			case 1:
			//Read T0 data
			My_ADC_Read(0);
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 63 00 	call	0xc6	; 0xc6 <My_ADC_Read>
			//Write T0 data to clock
			
			break;
 412:	09 c0       	rjmp	.+18     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			
			case 2:
			//Read T1 data
			My_ADC_Read(1);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 63 00 	call	0xc6	; 0xc6 <My_ADC_Read>
			//Write T1 data to clock
			break;
 41c:	04 c0       	rjmp	.+8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			
			case 3:
			//Read T2 data
			My_ADC_Read(2);
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 63 00 	call	0xc6	; 0xc6 <My_ADC_Read>
			break;
		}
		
	}

	My_USART0_TransmitByte(symbol);
 426:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <My_USART0_TransmitByte>
	PORTB ^= (1 << PORTB5);
 430:	95 b1       	in	r25, 0x05	; 5
 432:	80 e2       	ldi	r24, 0x20	; 32
 434:	89 27       	eor	r24, r25
 436:	85 b9       	out	0x05, r24	; 5
 438:	ff 91       	pop	r31
 43a:	ef 91       	pop	r30
 43c:	bf 91       	pop	r27
 43e:	af 91       	pop	r26
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	7f 91       	pop	r23
 446:	6f 91       	pop	r22
 448:	5f 91       	pop	r21
 44a:	4f 91       	pop	r20
 44c:	3f 91       	pop	r19
 44e:	2f 91       	pop	r18
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <__floatunsisf>:
 45a:	e8 94       	clt
 45c:	09 c0       	rjmp	.+18     	; 0x470 <__floatsisf+0x12>

0000045e <__floatsisf>:
 45e:	97 fb       	bst	r25, 7
 460:	3e f4       	brtc	.+14     	; 0x470 <__floatsisf+0x12>
 462:	90 95       	com	r25
 464:	80 95       	com	r24
 466:	70 95       	com	r23
 468:	61 95       	neg	r22
 46a:	7f 4f       	sbci	r23, 0xFF	; 255
 46c:	8f 4f       	sbci	r24, 0xFF	; 255
 46e:	9f 4f       	sbci	r25, 0xFF	; 255
 470:	99 23       	and	r25, r25
 472:	a9 f0       	breq	.+42     	; 0x49e <__floatsisf+0x40>
 474:	f9 2f       	mov	r31, r25
 476:	96 e9       	ldi	r25, 0x96	; 150
 478:	bb 27       	eor	r27, r27
 47a:	93 95       	inc	r25
 47c:	f6 95       	lsr	r31
 47e:	87 95       	ror	r24
 480:	77 95       	ror	r23
 482:	67 95       	ror	r22
 484:	b7 95       	ror	r27
 486:	f1 11       	cpse	r31, r1
 488:	f8 cf       	rjmp	.-16     	; 0x47a <__floatsisf+0x1c>
 48a:	fa f4       	brpl	.+62     	; 0x4ca <__floatsisf+0x6c>
 48c:	bb 0f       	add	r27, r27
 48e:	11 f4       	brne	.+4      	; 0x494 <__floatsisf+0x36>
 490:	60 ff       	sbrs	r22, 0
 492:	1b c0       	rjmp	.+54     	; 0x4ca <__floatsisf+0x6c>
 494:	6f 5f       	subi	r22, 0xFF	; 255
 496:	7f 4f       	sbci	r23, 0xFF	; 255
 498:	8f 4f       	sbci	r24, 0xFF	; 255
 49a:	9f 4f       	sbci	r25, 0xFF	; 255
 49c:	16 c0       	rjmp	.+44     	; 0x4ca <__floatsisf+0x6c>
 49e:	88 23       	and	r24, r24
 4a0:	11 f0       	breq	.+4      	; 0x4a6 <__floatsisf+0x48>
 4a2:	96 e9       	ldi	r25, 0x96	; 150
 4a4:	11 c0       	rjmp	.+34     	; 0x4c8 <__floatsisf+0x6a>
 4a6:	77 23       	and	r23, r23
 4a8:	21 f0       	breq	.+8      	; 0x4b2 <__floatsisf+0x54>
 4aa:	9e e8       	ldi	r25, 0x8E	; 142
 4ac:	87 2f       	mov	r24, r23
 4ae:	76 2f       	mov	r23, r22
 4b0:	05 c0       	rjmp	.+10     	; 0x4bc <__floatsisf+0x5e>
 4b2:	66 23       	and	r22, r22
 4b4:	71 f0       	breq	.+28     	; 0x4d2 <__floatsisf+0x74>
 4b6:	96 e8       	ldi	r25, 0x86	; 134
 4b8:	86 2f       	mov	r24, r22
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	2a f0       	brmi	.+10     	; 0x4ca <__floatsisf+0x6c>
 4c0:	9a 95       	dec	r25
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	88 1f       	adc	r24, r24
 4c8:	da f7       	brpl	.-10     	; 0x4c0 <__floatsisf+0x62>
 4ca:	88 0f       	add	r24, r24
 4cc:	96 95       	lsr	r25
 4ce:	87 95       	ror	r24
 4d0:	97 f9       	bld	r25, 7
 4d2:	08 95       	ret

000004d4 <__fp_inf>:
 4d4:	97 f9       	bld	r25, 7
 4d6:	9f 67       	ori	r25, 0x7F	; 127
 4d8:	80 e8       	ldi	r24, 0x80	; 128
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	08 95       	ret

000004e0 <__fp_nan>:
 4e0:	9f ef       	ldi	r25, 0xFF	; 255
 4e2:	80 ec       	ldi	r24, 0xC0	; 192
 4e4:	08 95       	ret

000004e6 <__fp_pscA>:
 4e6:	00 24       	eor	r0, r0
 4e8:	0a 94       	dec	r0
 4ea:	16 16       	cp	r1, r22
 4ec:	17 06       	cpc	r1, r23
 4ee:	18 06       	cpc	r1, r24
 4f0:	09 06       	cpc	r0, r25
 4f2:	08 95       	ret

000004f4 <__fp_pscB>:
 4f4:	00 24       	eor	r0, r0
 4f6:	0a 94       	dec	r0
 4f8:	12 16       	cp	r1, r18
 4fa:	13 06       	cpc	r1, r19
 4fc:	14 06       	cpc	r1, r20
 4fe:	05 06       	cpc	r0, r21
 500:	08 95       	ret

00000502 <__fp_round>:
 502:	09 2e       	mov	r0, r25
 504:	03 94       	inc	r0
 506:	00 0c       	add	r0, r0
 508:	11 f4       	brne	.+4      	; 0x50e <__fp_round+0xc>
 50a:	88 23       	and	r24, r24
 50c:	52 f0       	brmi	.+20     	; 0x522 <__fp_round+0x20>
 50e:	bb 0f       	add	r27, r27
 510:	40 f4       	brcc	.+16     	; 0x522 <__fp_round+0x20>
 512:	bf 2b       	or	r27, r31
 514:	11 f4       	brne	.+4      	; 0x51a <__fp_round+0x18>
 516:	60 ff       	sbrs	r22, 0
 518:	04 c0       	rjmp	.+8      	; 0x522 <__fp_round+0x20>
 51a:	6f 5f       	subi	r22, 0xFF	; 255
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	8f 4f       	sbci	r24, 0xFF	; 255
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	08 95       	ret

00000524 <__fp_split3>:
 524:	57 fd       	sbrc	r21, 7
 526:	90 58       	subi	r25, 0x80	; 128
 528:	44 0f       	add	r20, r20
 52a:	55 1f       	adc	r21, r21
 52c:	59 f0       	breq	.+22     	; 0x544 <__fp_splitA+0x10>
 52e:	5f 3f       	cpi	r21, 0xFF	; 255
 530:	71 f0       	breq	.+28     	; 0x54e <__fp_splitA+0x1a>
 532:	47 95       	ror	r20

00000534 <__fp_splitA>:
 534:	88 0f       	add	r24, r24
 536:	97 fb       	bst	r25, 7
 538:	99 1f       	adc	r25, r25
 53a:	61 f0       	breq	.+24     	; 0x554 <__fp_splitA+0x20>
 53c:	9f 3f       	cpi	r25, 0xFF	; 255
 53e:	79 f0       	breq	.+30     	; 0x55e <__fp_splitA+0x2a>
 540:	87 95       	ror	r24
 542:	08 95       	ret
 544:	12 16       	cp	r1, r18
 546:	13 06       	cpc	r1, r19
 548:	14 06       	cpc	r1, r20
 54a:	55 1f       	adc	r21, r21
 54c:	f2 cf       	rjmp	.-28     	; 0x532 <__fp_split3+0xe>
 54e:	46 95       	lsr	r20
 550:	f1 df       	rcall	.-30     	; 0x534 <__fp_splitA>
 552:	08 c0       	rjmp	.+16     	; 0x564 <__fp_splitA+0x30>
 554:	16 16       	cp	r1, r22
 556:	17 06       	cpc	r1, r23
 558:	18 06       	cpc	r1, r24
 55a:	99 1f       	adc	r25, r25
 55c:	f1 cf       	rjmp	.-30     	; 0x540 <__fp_splitA+0xc>
 55e:	86 95       	lsr	r24
 560:	71 05       	cpc	r23, r1
 562:	61 05       	cpc	r22, r1
 564:	08 94       	sec
 566:	08 95       	ret

00000568 <__fp_zero>:
 568:	e8 94       	clt

0000056a <__fp_szero>:
 56a:	bb 27       	eor	r27, r27
 56c:	66 27       	eor	r22, r22
 56e:	77 27       	eor	r23, r23
 570:	cb 01       	movw	r24, r22
 572:	97 f9       	bld	r25, 7
 574:	08 95       	ret

00000576 <__mulsf3>:
 576:	0e 94 ce 02 	call	0x59c	; 0x59c <__mulsf3x>
 57a:	0c 94 81 02 	jmp	0x502	; 0x502 <__fp_round>
 57e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fp_pscA>
 582:	38 f0       	brcs	.+14     	; 0x592 <__mulsf3+0x1c>
 584:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fp_pscB>
 588:	20 f0       	brcs	.+8      	; 0x592 <__mulsf3+0x1c>
 58a:	95 23       	and	r25, r21
 58c:	11 f0       	breq	.+4      	; 0x592 <__mulsf3+0x1c>
 58e:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_inf>
 592:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_nan>
 596:	11 24       	eor	r1, r1
 598:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_szero>

0000059c <__mulsf3x>:
 59c:	0e 94 92 02 	call	0x524	; 0x524 <__fp_split3>
 5a0:	70 f3       	brcs	.-36     	; 0x57e <__mulsf3+0x8>

000005a2 <__mulsf3_pse>:
 5a2:	95 9f       	mul	r25, r21
 5a4:	c1 f3       	breq	.-16     	; 0x596 <__mulsf3+0x20>
 5a6:	95 0f       	add	r25, r21
 5a8:	50 e0       	ldi	r21, 0x00	; 0
 5aa:	55 1f       	adc	r21, r21
 5ac:	62 9f       	mul	r22, r18
 5ae:	f0 01       	movw	r30, r0
 5b0:	72 9f       	mul	r23, r18
 5b2:	bb 27       	eor	r27, r27
 5b4:	f0 0d       	add	r31, r0
 5b6:	b1 1d       	adc	r27, r1
 5b8:	63 9f       	mul	r22, r19
 5ba:	aa 27       	eor	r26, r26
 5bc:	f0 0d       	add	r31, r0
 5be:	b1 1d       	adc	r27, r1
 5c0:	aa 1f       	adc	r26, r26
 5c2:	64 9f       	mul	r22, r20
 5c4:	66 27       	eor	r22, r22
 5c6:	b0 0d       	add	r27, r0
 5c8:	a1 1d       	adc	r26, r1
 5ca:	66 1f       	adc	r22, r22
 5cc:	82 9f       	mul	r24, r18
 5ce:	22 27       	eor	r18, r18
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	62 1f       	adc	r22, r18
 5d6:	73 9f       	mul	r23, r19
 5d8:	b0 0d       	add	r27, r0
 5da:	a1 1d       	adc	r26, r1
 5dc:	62 1f       	adc	r22, r18
 5de:	83 9f       	mul	r24, r19
 5e0:	a0 0d       	add	r26, r0
 5e2:	61 1d       	adc	r22, r1
 5e4:	22 1f       	adc	r18, r18
 5e6:	74 9f       	mul	r23, r20
 5e8:	33 27       	eor	r19, r19
 5ea:	a0 0d       	add	r26, r0
 5ec:	61 1d       	adc	r22, r1
 5ee:	23 1f       	adc	r18, r19
 5f0:	84 9f       	mul	r24, r20
 5f2:	60 0d       	add	r22, r0
 5f4:	21 1d       	adc	r18, r1
 5f6:	82 2f       	mov	r24, r18
 5f8:	76 2f       	mov	r23, r22
 5fa:	6a 2f       	mov	r22, r26
 5fc:	11 24       	eor	r1, r1
 5fe:	9f 57       	subi	r25, 0x7F	; 127
 600:	50 40       	sbci	r21, 0x00	; 0
 602:	9a f0       	brmi	.+38     	; 0x62a <__mulsf3_pse+0x88>
 604:	f1 f0       	breq	.+60     	; 0x642 <__mulsf3_pse+0xa0>
 606:	88 23       	and	r24, r24
 608:	4a f0       	brmi	.+18     	; 0x61c <__mulsf3_pse+0x7a>
 60a:	ee 0f       	add	r30, r30
 60c:	ff 1f       	adc	r31, r31
 60e:	bb 1f       	adc	r27, r27
 610:	66 1f       	adc	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	88 1f       	adc	r24, r24
 616:	91 50       	subi	r25, 0x01	; 1
 618:	50 40       	sbci	r21, 0x00	; 0
 61a:	a9 f7       	brne	.-22     	; 0x606 <__mulsf3_pse+0x64>
 61c:	9e 3f       	cpi	r25, 0xFE	; 254
 61e:	51 05       	cpc	r21, r1
 620:	80 f0       	brcs	.+32     	; 0x642 <__mulsf3_pse+0xa0>
 622:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_inf>
 626:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_szero>
 62a:	5f 3f       	cpi	r21, 0xFF	; 255
 62c:	e4 f3       	brlt	.-8      	; 0x626 <__mulsf3_pse+0x84>
 62e:	98 3e       	cpi	r25, 0xE8	; 232
 630:	d4 f3       	brlt	.-12     	; 0x626 <__mulsf3_pse+0x84>
 632:	86 95       	lsr	r24
 634:	77 95       	ror	r23
 636:	67 95       	ror	r22
 638:	b7 95       	ror	r27
 63a:	f7 95       	ror	r31
 63c:	e7 95       	ror	r30
 63e:	9f 5f       	subi	r25, 0xFF	; 255
 640:	c1 f7       	brne	.-16     	; 0x632 <__mulsf3_pse+0x90>
 642:	fe 2b       	or	r31, r30
 644:	88 0f       	add	r24, r24
 646:	91 1d       	adc	r25, r1
 648:	96 95       	lsr	r25
 64a:	87 95       	ror	r24
 64c:	97 f9       	bld	r25, 7
 64e:	08 95       	ret

00000650 <strcmp>:
 650:	fb 01       	movw	r30, r22
 652:	dc 01       	movw	r26, r24
 654:	8d 91       	ld	r24, X+
 656:	01 90       	ld	r0, Z+
 658:	80 19       	sub	r24, r0
 65a:	01 10       	cpse	r0, r1
 65c:	d9 f3       	breq	.-10     	; 0x654 <strcmp+0x4>
 65e:	99 0b       	sbc	r25, r25
 660:	08 95       	ret

00000662 <_exit>:
 662:	f8 94       	cli

00000664 <__stop_program>:
 664:	ff cf       	rjmp	.-2      	; 0x664 <__stop_program>
